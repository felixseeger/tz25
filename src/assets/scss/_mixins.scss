@import 'variables';

// Media query for max-width (mobile-first approach)
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: $breakpoint-xs) { @content; }
  } @else if $breakpoint == sm {
    @media (max-width: $breakpoint-sm) { @content; }
  } @else if $breakpoint == md {
    @media (max-width: $breakpoint-md) { @content; }
  } @else if $breakpoint == lg {
    @media (max-width: $breakpoint-lg) { @content; }
  } @else if $breakpoint == xl {
    @media (max-width: $breakpoint-xl) { @content; }
  } @else if $breakpoint == xxl {
    @media (max-width: $breakpoint-xxl) { @content; }
  } @else if $breakpoint == xxxl {
    @media (max-width: $breakpoint-xxxl) { @content; }
  } @else if $breakpoint == 4k {
    @media (max-width: $breakpoint-4k) { @content; }
  }
}

// Media query for min-width (desktop-specific styling)
@mixin desktop-up($breakpoint) {
  @if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) { @content; }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) { @content; }
  } @else if $breakpoint == xxl {
    @media (min-width: $breakpoint-xxl) { @content; }
  } @else if $breakpoint == xxxl {
    @media (min-width: $breakpoint-xxxl) { @content; }
  } @else if $breakpoint == 4k {
    @media (min-width: $breakpoint-4k) { @content; }
  }
}

// Media query for specific range (between two breakpoints)
@mixin respond-between($min, $max) {
  @media (min-width: $min) and (max-width: $max) { @content; }
}

// Font optimization mixins

// Apply font with fallback
@mixin font-with-fallback($family, $weight: 400, $style: normal) {
  font-family: $family, 'sans-serif';
  font-weight: $weight;
  font-style: $style;
}

// Apply critical font with subset
@mixin critical-font($family, $weight: 400, $style: normal) {
  font-family: '#{$family} Subset', $family, 'sans-serif';
  font-weight: $weight;
  font-style: $style;
}

// Apply font loading classes
@mixin font-loading($stage: 'critical') {
  @if $stage == 'critical' {
    .fonts-loading & {
      opacity: 0;
    }
    .fonts-critical-loaded & {
      opacity: 1;
      transition: opacity 0.2s ease-in-out;
    }
  } @else if $stage == 'important' {
    .fonts-loading & {
      opacity: 0;
    }
    .fonts-important-loaded & {
      opacity: 1;
      transition: opacity 0.2s ease-in-out;
    }
  }
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin container {
  width: 100%;
  max-width: $container-width;
  margin: 0 auto;
  padding: 0 $spacing-unit;
}

// Boxed-centered text container with left-aligned text
@mixin boxed-centered-text($max-width: 800px) {
  width: 100%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
  text-align: left;
  padding-left: 2rem;
  padding-right: 2rem;

  @media (max-width: $breakpoint-md) {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }

  @media (max-width: $breakpoint-sm) {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}
